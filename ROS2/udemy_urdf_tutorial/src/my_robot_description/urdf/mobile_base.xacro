<?xml version="1.0"?>

<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!-- xacro properties for geometries -->
    <xacro:property name="scale" value="2.0" />
    <xacro:property name="base_length" value="${0.6 * scale}" />
    <xacro:property name="base_width" value="${0.4 * scale}" />
    <xacro:property name="base_height" value="${0.2 * scale}" />
    <xacro:property name="lidar_radius" value="${0.1 * scale}" />
    <xacro:property name="lidar_length" value="${0.05 * scale}" />
    <xacro:property name="wheel_radius" value="${0.1 * scale}" />
    <xacro:property name="wheel_length" value="${0.05 * scale}" />

    <!-- virtual link declared -->
    <!-- Sets up robot on ground -->
    <link name="base_footprint" />

    <!-- Initialising base here -->
    <!-- Origin refers to the centre of the geometry-->
    <link name="base_link">
        <visual>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}" />
            </geometry>
            <origin xyz="0 0 ${base_height / 2}" rpy="0 0 0" />
            <material name="blue"/>
        </visual>
        
        <collision>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}" />
            </geometry>
            <origin xyz="0 0 ${base_height / 2}" rpy="0 0 0" />
            <material name="grey"/>
        </collision>

        <xacro:cuboid_inertia m="5.0" l="${base_length}" w="${base_width}" h="${base_height}"
                                xyz="0 0 ${base_height / 2}" rpy="0 0 0" />
    </link>

    <!-- Initialising lidar here -->
    <!-- Needs to be a child link  -->
    <!-- A joint is needed between base and lidar.  -->
    <link name="lidar_link">
        <visual>
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <material name="white" />
        </visual>
        
        <collision>
            <geometry>
                <cylinder radius="${lidar_radius}" length="${lidar_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <material name="grey" />
        </collision>

        <xacro:cylinder_inertia m="0.25" r="${lidar_radius}" h="${lidar_length}" xyz="0 0 0" rpy="0 0 0" />
    </link>

    <!-- Initialising wheels here -->
    <!-- rpy is calibrated in radians  -->

    <!-- xacro:macro declared here, basically a function in xacro -->
    <!-- xacro:macro replaces redundant wheel links -->
    <xacro:macro name="wheels_link" params="prefix">
        <link name="back_${prefix}_wheel_link">
            <visual>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <origin xyz="0 0 0" rpy="${pi / 2} 0 0" />
                <material name="grey" />
            </visual>
        
            <collision>
                <geometry>
                    <sphere radius="${wheel_radius}" />
                </geometry>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <material name="grey" />
            </collision>

        <xacro:cylinder_inertia m="1.0" r="${wheel_radius}" h="${wheel_length}" xyz="0 0 0" rpy="${pi / 2} 0 0" />

        </link>
    </xacro:macro>

    <xacro:wheels_link prefix="left" />
    <xacro:wheels_link prefix="right" />

    <!-- Initialising castor wheel here -->
    <link name="castor_wheel_link">
        <visual>
            <geometry>
                <sphere radius="${wheel_radius / 2}"/>
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <material name="grey" />
        </visual>

        <collision>
            <geometry>
                <sphere radius="${wheel_radius / 2}"/>
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <material name="grey" />
        </collision>

        <xacro:sphere_inertia m="0.5" r="${wheel_radius/2}" xyz="0 0 0" rpy="0 0 0" />
    </link>

    <!-- Joint declared here  -->
    <!-- Keep base_link constant and child links origins constant  -->
    <!-- Adjust the joint origin only  -->
    <!-- If not enough. then adjust child links origins -->
    <joint name="base_joint" type="fixed">
        <parent link="base_footprint" />
        <child link="base_link" />
        <origin xyz="0 0 ${wheel_radius}" rpy="0 0 0" />
    </joint>

    <joint name="base_lidar_joint" type="fixed">
        <parent link="base_link" />
        <child link="lidar_link" />
        <origin xyz="0 0 ${base_height + lidar_length / 2}" rpy="0 0 0" />
    </joint>

    <joint name="base_back_left_wheel_joint" type="continuous">
        <parent link="base_link" />
        <child link="back_left_wheel_link" />
        <origin xyz="${-base_length / 4} ${base_width / 2 + wheel_length / 2} 0" rpy="0 0 0" />

        <!-- Declare rotation about given axis -->
        <axis xyz="0 1 0" />
    </joint>

    <joint name="base_back_right_wheel_joint" type="continuous">
        <parent link="base_link" />
        <child link="back_right_wheel_link" />
        <origin xyz="${-base_length / 4} ${-base_width / 2 - wheel_length / 2} 0" rpy="0 0 0" />

        <!-- Declare rotation about given axis -->
        <axis xyz="0 1 0" />
    </joint>

    <joint name="base_castor_wheel_joint" type="fixed">
        <parent link="base_link" />
        <child link="castor_wheel_link" />
        <origin xyz="${base_length / 3} 0 ${-wheel_radius / 2}" rpy="0 0 0" />
    </joint>

</robot>